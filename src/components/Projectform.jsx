import React, { useEffect, useState } from "react";
import Navbar from "./Navbar";
import {
  createProject,
  getProjects,
  getProject,
  updateProject,
} from "../api/index.js";
import Swal from "sweetalert2";
import { useNavigate, useParams } from "react-router-dom";

/** Generated by GPT4
 * Projectform Component
 *
 * This component handles the form for creating or editing a project. It supports loading existing project data if the user is editing,
 * and submitting new project data for creation or updates. The form includes fields for the project title, description, instructions,
 * initial clue, homescreen display options, participation scoring, and published status.
 *
 * Features:
 * - If `projectId` is present in the URL, the component fetches and pre-fills the form with the project data for editing.
 * - Handles form submission, either creating a new project or updating an existing one based on the `projectId`.
 * - Displays loading state while fetching project data.
 *
 * @returns {JSX.Element} - Returns a form for creating or editing a project.
 *
 * State Variables:
 * - `title` {string}: The title of the project.
 * - `description` {string}: The description of the project.
 * - `instruction` {string}: Instructions for the project.
 * - `initialClue` {string}: The initial clue for the project.
 * - `homescreenDisplay` {string}: Option selected for how the project should display on the home screen.
 * - `participationScoring` {string}: Option selected for how participation will be scored.
 * - `isPublised` {boolean}: Whether the project is published or not.
 * - `loading` {boolean}: Indicates if project data is being loaded when editing an existing project.
 *
 * Props:
 * - None
 *
 * API:
 * - `createProject` {function}: API call to create a new project.
 * - `getProject` {function}: API call to fetch data for a single project based on its ID.
 * - `updateProject` {function}: API call to update an existing project based on its ID.
 *
 * Libraries:
 * - `React`: Handles component state and lifecycle.
 * - `Swal`: Sweetalert2 for displaying success or error notifications.
 * - `useNavigate`, `useParams` from `react-router-dom`: For routing and extracting URL parameters.
 *
 * @example
 * <Projectform />
 */

function Projectform() {
  // Initialize navigation and project ID from URL parameters
  const navigate = useNavigate();
  let projectId = useParams();
  if (Object.keys(projectId).length !== 0) {
    projectId = projectId.id.substring(1, projectId.id.length);
  }
  // Options for home screen display and participation scoring
  const homeScreenDisplayOptions = [
    "Display Initial Clue",
    "Display All Locations",
  ];
  const participationScoringOptions = [
    "Not Scored",
    "Number of scanned QR codes",
    "Number of locations visited",
  ];

  // State variables for form fields and loading status
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [instruction, setInstruction] = useState("");
  const [initialClue, setInitialClue] = useState("");
  const [homescreenDisplay, setHomeScreenDisplay] = useState(
    homeScreenDisplayOptions[0]
  );
  const [participationScoring, setParticipationScoring] = useState(
    participationScoringOptions[0]
  );
  const [isPublised, setIsPublised] = useState(false);
  const [loading, setLoading] = useState(true);

  // Update options for home screen display and participation scoring
  const updateOptionsHomeScreenDisplay = (option) => {
    setHomeScreenDisplay(option);
  };
  const updateOptionsParticipationScoring = (option) => {
    setParticipationScoring(option);
  };

  // Fetch project data if editing an existing project
  useEffect(() => {
    if (Object.keys(projectId).length !== 0) {
      try {
        const fetchProjects = async () => {
          const arrayDataObject = await getProject(projectId);
          const fetchData = arrayDataObject[0];
          setTitle(fetchData.title);
          setDescription(fetchData.description);
          setInstruction(fetchData.instructions);
          setInitialClue(fetchData.initial_clue);
          setHomeScreenDisplay(fetchData.homescreen_display);
          setParticipationScoring(fetchData.participant_scoring);
          setIsPublised(fetchData.is_published);
          setLoading(false);
        };
        fetchProjects();
      } catch (error) {
        console.error("Error fetching projects: ", error);
      }
    } else {
      setLoading(false);
    }
  }, []);

  // Handle form submission for creating or updating projects
  const handleSumbitForm = async (e) => {
    try {
      console.log(projectId);
      if (Object.keys(projectId).length == 0) {
        e.preventDefault();
        const newProject = {
          title: title,
          description: description,
          instructions: instruction,
          initial_clue: initialClue,
          homescreen_display: homescreenDisplay,
          is_published: isPublised,
          participant_scoring: participationScoring,
        };

        const createNewProject = await createProject(newProject);
        console.log("Project created: " + createNewProject);
        Swal.fire({
          title: "Project created successfully",
          text: "Naviagating you back to the Projects page!",
          icon: "success",
        });
        navigate("/allProjects");
      } else {
        e.preventDefault();
        const updatedProject = {
          title: title,
          description: description,
          instructions: instruction,
          initial_clue: initialClue,
          homescreen_display: homescreenDisplay,
          is_published: isPublised,
          participant_scoring: participationScoring,
        };
        await updateProject(projectId, updatedProject);
        Swal.fire({
          title: "Project updated successfully",
          text: "Naviagating you back to the Projects page!",
          icon: "success",
        });
        navigate("/allProjects");
      }
    } catch (err) {
      console.error("Error creating project: ", err);
    }
  };

  return (
    <div className="mb-5">
      <Navbar />
      {loading ? (
        <h1>Resources loading</h1>
      ) : (
        <div className="mx-auto max-w-4xl p-6 rounded-lg shadow-md">
          <h1 className="text-2xl font-bold ml-[15%] text-black">
            Edit Projects
          </h1>
          <h2 className="mt-5 ml-[15%] text-lg">
            Edit or add new projects here by filling the form below
          </h2>
          <form
            className="flex flex-col mt-2 ml-[15%]"
            onSubmit={handleSumbitForm}
          >
            <label className="text-lg">Title</label>
            <input
              required={true}
              type="text"
              placeholder="Project Name"
              className="rounded-xl w-[60%] p-2 bg-[#fbf7f5]  border-neutral border-opacity-15 border-[1px] text-neutral placeholder-[#866c5f] mt-2"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            ></input>

            <label className="text-lg mt-3">Description</label>
            <textarea
              type="text"
              placeholder="Project Description"
              className="rounded-xl w-[60%] p-2 bg-[#fbf7f5]  border-neutral border-opacity-15 border-[1px] text-neutral placeholder-[#866c5f] mt-2"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            ></textarea>

            <label className="text-lg mt-3">Instructions</label>
            <textarea
              type="text"
              placeholder="Project Instructions"
              className="rounded-xl w-[60%] p-2 bg-[#fbf7f5]  border-neutral border-opacity-15 border-[1px] text-neutral placeholder-[#866c5f] mt-2"
              value={instruction}
              onChange={(e) => setInstruction(e.target.value)}
            ></textarea>

            <label className="text-lg mt-3">Initial Clue</label>
            <textarea
              type="text"
              placeholder="Initial Clue"
              className="rounded-xl w-[60%] p-2 bg-[#fbf7f5]  border-neutral border-opacity-15 border-[1px] text-neutral placeholder-[#866c5f] mt-2"
              value={initialClue}
              onChange={(e) => setInitialClue(e.target.value)}
            ></textarea>

            <label className="text-lg mt-3">Homescreen Display</label>
            <select
              className="rounded-xl w-[60%] p-2 bg-[#fbf7f5]  border-neutral border-opacity-15 border-[1px] text-neutral placeholder-[#866c5f] mt-2"
              onChange={(e) => updateOptionsHomeScreenDisplay(e.target.value)}
              value={homescreenDisplay}
            >
              <option value={homeScreenDisplayOptions[0]}>
                Display Initial Clue
              </option>
              <option value={homeScreenDisplayOptions[1]}>
                Display All locations
              </option>
            </select>

            <label className="text-lg mt-3">Participation Scoring</label>
            <select
              className="rounded-xl w-[60%] p-2 bg-[#fbf7f5]  border-neutral border-opacity-15 border-[1px] text-neutral placeholder-[#866c5f] mt-2"
              onChange={(e) =>
                updateOptionsParticipationScoring(e.target.value)
              }
              value={participationScoring}
            >
              <option value={participationScoringOptions[0]}>Not Scored</option>
              <option value={participationScoringOptions[1]}>
                Number of scanned QR codes
              </option>
              <option value={participationScoringOptions[2]}>
                Number of locations visited
              </option>
            </select>

            <div className="flex gap-2 mt-2">
              <label>Published</label>
              <input
                type="checkbox"
                checked={isPublised}
                onChange={(e) => {
                  setIsPublised((prev) => !prev);
                }}
              />
            </div>
            <button
              type="submit"
              className="btn btn-neutral relative w-1/4 left-[70%]"
            >
              Next
            </button>
          </form>
        </div>
      )}
    </div>
  );
}

export default Projectform;
